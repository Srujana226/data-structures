#include <stdio.h> 
#include <stdlib.h> 
#define M 3 // Order of the B+ tree 
typedef struct Node { 
 int isLeaf; // 1 if node is a leaf, 0 if it's an internal node 
 int numKeys; // Number of keys in the node 
 int keys[M - 1]; // Keys in the node 
 struct Node* children[M]; // Pointers to child nodes 
 struct Node* next; // Pointer to the next leaf node 
} Node; 
Node* createNode() { 
 Node* newNode = (Node*)malloc(sizeof(Node)); 
 newNode->isLeaf = 1; 
 newNode->numKeys = 0; 
 newNode->next = NULL; 
 int i; 
 for (i = 0; i < M - 1; ++i) 
 newNode->keys[i] = 0; 
 for (i = 0; i < M; ++i) 
 newNode->children[i] = NULL; 
 return newNode; 
} 
void printTree(Node* root, int level) { 
 if (root != NULL) { 
 printf("Level %d: [", level); 
 int i; 
 for (i = 0; i < root->numKeys; ++i) { 
 printTree(root->children[i], level + 1); 
 printf("%d", root->keys[i]); 
 if (i < root->numKeys - 1) 
 printf(", "); 
 } 
 printTree(root->children[root->numKeys], level + 1); 
 printf("] "); 
 } 
 else { 
 printf("Leaf "); 
 } 
} 
void splitChild(Node* parent, int index) { 
 Node* newNode = createNode(); 
 Node* child = parent->children[index]; 
 newNode->isLeaf = child->isLeaf; 
 newNode->numKeys = M / 2; 
To write a C program to perform insertion, 
deletion and traversal using B+ trees 
 BVRIT HYDERABAD College of Engineering for Women 
Title : Date : 
Page No. : 54 
 int i; 
 for (i = 0; i < M / 2; ++i) { 
 newNode->keys[i] = child->keys[i + M / 2]; 
 child->keys[i + M / 2] = 0; 
 } 
 if (!child->isLeaf) { 
 for (i = 0; i < M / 2 + 1; ++i) { 
 newNode->children[i] = child->children[i + M / 2]; 
 child->children[i + M / 2] = NULL; 
 } 
 } 
 child->numKeys = M / 2; 
 for (i = parent->numKeys; i > index; --i) 
 parent->children[i + 1] = parent->children[i]; 
 parent->children[index + 1] = newNode; 
 for (i = parent->numKeys - 1; i > index - 1; --i) 
 parent->keys[i + 1] = parent->keys[i]; 
 parent->keys[index] = child->keys[M / 2 - 1]; 
 child->keys[M / 2 - 1] = 0; 
 parent->numKeys++; 
} 
void insertNonFull(Node* node, int key) { 
 int i = node->numKeys - 1; 
 if (node->isLeaf) { 
 while (i >= 0 && key < node->keys[i]) { 
 node->keys[i + 1] = node->keys[i]; 
 i--; 
 } 
 node->keys[i + 1] = key; 
 node->numKeys++; 
 } else { 
 while (i >= 0 && key < node->keys[i]) 
 i--; 
 i++; 
 if (node->children[i]->numKeys == M - 1) { 
 splitChild(node, i); 
 if (key > node->keys[i]) 
 i++; 
 } 
 insertNonFull(node->children[i], key); 
 } 
} 
void insert(Node** root, int key) { 
 if ((*root) == NULL) { 
 (*root) = createNode(); 
 (*root)->keys[0] = key; 
 (*root)->numKeys = 1; 
 } else { 
 if ((*root)->numKeys == M - 1) { 
 Node* newNode = createNode(); 
 newNode->isLeaf = 0; 
 newNode->children[0] = (*root); 
 (*root) = newNode; 
 splitChild((*root), 0); 
 insertNonFull((*root), key); 
 } else { 
 insertNonFull((*root), key); 
 } 
 } 
} 
int findInNode(Node* node, int key) { 
 int i = 0; 
 while (i < node->numKeys && key > node->keys[i]) 
 i++; 
 return i; 
} 
void removeKeyFromLeaf(Node* node, int index) { 
 int i; 
 for (i = index; i < node->numKeys - 1; i++) { 
 node->keys[i] = node->keys[i + 1]; 
 } 
 node->numKeys--; 
} 
void removeFromInternalNode(Node* node, int index) { 
 int i; 
 for (i = index; i < node->numKeys - 1; i++) { 
 node->keys[i] = node->keys[i + 1]; 
 node->children[i + 1] = node->children[i + 2]; 
 } 
 node->numKeys--; 
} 
void deleteFromNode(Node* node, int key); 
void deleteFromInternalNode(Node* node, int key) { 
 int index = findInNode(node, key); 
 Node* child = node->children[index]; 
 if (child->numKeys >= (M + 1) / 2) { 
 deleteFromNode(child, key); 
 } else { 
 Node* sibling; 
 if (index == 0) { 
 sibling = node->children[index + 1]; 
 if (sibling->numKeys >= (M + 1) / 2) { 
 // Borrow a key from the right sibling 
 child->keys[child->numKeys] = node->keys[index]; 
 child->numKeys++; 
 node->keys[index] = sibling->keys[0]; 
 removeFromInternalNode(sibling, 0); 
 } else { 
 // Merge with the right sibling 
 child->keys[child->numKeys] = node->keys[index]; 
 child->numKeys++; 
 int i; 
 for (i = 0; i < sibling->numKeys; i++) { 
 child->keys[child->numKeys] = sibling->keys[i]; 
 child->numKeys++; 
 } 
 for (i = 0; i <= sibling->numKeys; i++) { 
 child->children[child->numKeys] = sibling->children[i]; 
 } 
 node->children[index + 1] = NULL; 
 removeFromInternalNode(node, index); 
 free(sibling); 
 } 
 } else { 
 sibling = node->children[index - 1]; 
 if (sibling->numKeys >= (M + 1) / 2) { 
 // Borrow a key from the left sibling 
 int i; 
 for (i = child->numKeys; i > 0; i--) { 
 child->keys[i] = child->keys[i - 1]; 
 } 
 child->keys[0] = node->keys[index - 1]; 
 child->numKeys++; 
 node->keys[index - 1] = sibling->keys[sibling->numKeys - 1]; 
 child->children[0] = sibling->children[sibling->numKeys]; 
 removeFromInternalNode(sibling, sibling->numKeys - 1); 
 } else { 
 // Merge with the left sibling 
 sibling->keys[sibling->numKeys] = node->keys[index - 1]; 
 sibling->numKeys++; 
 int i; 
 for (i = 0; i < child->numKeys; i++) { 
 sibling->keys[sibling->numKeys] = child->keys[i]; 
 sibling->numKeys++; 
 } 
 for (i = 0; i <= child->numKeys; i++) { 
 sibling->children[sibling->numKeys] = child->children[i]; 
 } 
 node->children[index] = NULL; 
 removeFromInternalNode(node, index - 1); 
 free(child); 
 } 
 } 
 } 
} 
void deleteFromNode(Node* node, int key) { 
 int index = findInNode(node, key); 
 if (node->isLeaf) { 
 removeKeyFromLeaf(node, index); 
 } else { 
 Node* child = node->children[index]; 
 if (child->numKeys >= (M + 1) / 2) { 
 // Child has enough keys, recursively delete 
 deleteFromNode(child, key); 
 } else { 
 // Child doesn't have enough keys 
 deleteFromInternalNode(node, key); 
 } 
 } 
} 
void deleteKey(Node** root, int key) { 
 if (*root == NULL) { 
 printf("Tree is empty. Key not found.\n"); 
 } else { 
 deleteFromNode(*root, key); 
 if ((*root)->numKeys == 0) { 
 Node* tmp = *root; 
 *root = (*root)->children[0]; 
 free(tmp); 
 } 
 } 
} 
void inOrderTraversal(Node* root) { 
 if (root != NULL) { 
 int i; 
 for (i = 0; i < root->numKeys; ++i) { 
 inOrderTraversal(root->children[i]); 
 printf("%d ", root->keys[i]); 
 } 
 inOrderTraversal(root->children[root->numKeys]); 
 } 
} 
int main() { 
 Node* root = NULL; 
 int choice, key; 
 printf("\nB+ Tree Operations:\n"); 
 printf("1. Insert a key\n"); 
 printf("2. Delete a key\n"); 
 printf("3. Traverse the tree (in-order)\n"); 
 printf("4. Exit\n"); 
 do { 
 printf("Enter your choice: "); 
 scanf("%d", &choice); 
 switch (choice) { 
 case 1: 
 printf("Enter key to insert: "); 
 scanf("%d", &key); 
 insert(&root, key); 
 printf("Inserting %d: ", key); 
 printTree(root, 0); 
 printf("\n"); 
 break; 
 case 2: 
 printf("Enter key to delete: "); 
 scanf("%d", &key); 
 deleteKey(&root, key); 
 printf("Deleting %d: ", key); 
 printTree(root, 0); 
 printf("\n"); 
 break; 
 case 3: 
 printf("In-order traversal: "); 
 inOrderTraversal(root); 
 printf("\n"); 
 break; 
 case 4: 
 printf("Exiting...\n"); 
 break; 
 default: 
 printf("Invalid choice. Please enter a valid option.\n"); 
 } 
 } while (choice != 0); 
 return 0; 
} 