#include<stdio.h> 
#include<stdlib.h> 
struct node 
{ 
 int key; 
 struct node *parent; 
 char color; 
 struct node *left; 
 struct node *right; 
}; 
struct RBtree 
{ 
 struct node *root; 
 struct node *q; 
}; 
void insert(struct RBtree *tree); 
void insertfix(struct RBtree *tree, struct node *t); 
void leftrotate(struct RBtree *tree, struct node *p); 
void rightrotate(struct RBtree *tree, struct node *p); 
void del(struct RBtree *tree); 
struct node* successor(struct node *p); 
void delfix(struct RBtree *tree, struct node *p); 
void disp(struct RBtree *tree); 
void display(struct node *p); 
void search(struct RBtree *tree); 
void insert(struct RBtree *tree) 
{ 
 int z,i=0; 
 printf("\nEnter key of the node to be inserted: "); 
 scanf("%d", &z); 
 struct node *p,*q; 
 struct node *t=(struct node*)malloc(sizeof(struct node)); 
 t->key=z; 
 t->left=NULL; 
 t->right=NULL; 
 t->color='r'; 
 p=tree->root; 
 q=NULL; 
 if(tree->root==NULL) 
 { 
 tree->root=t; 
 t->parent=NULL; 
 } 
 else 
 { 
 while(p!=NULL) 
 { 
 q=p; 
 if(p->key<t->key) 
 p=p->right; 
 else 
 p=p->left; 
 } 
 t->parent=q; 
 if(q->key<t->key) 
 q->right=t; 
 else 
 q->left=t; 
 } 
 insertfix(tree, t); 
} 
void insertfix(struct RBtree *tree, struct node *t) 
{ 
 struct node *u; 
 if(tree->root==t) 
 { 
 t->color='b'; 
 return; 
 } 
 while(t->parent!=NULL&&t->parent->color=='r') 
 { 
 struct node *g=t->parent->parent; 
 if(g->left==t->parent) 
 { 
 if(g->right!=NULL) 
 { 
 u=g->right; 
 if(u->color=='r') 
 { 
 t->parent->color='b'; 
 u->color='b'; 
 g->color='r'; 
 t=g; 
 } 
 } 
 else 
 { 
 if(t->parent->right==t) 
 { 
 t=t->parent; 
 leftrotate(tree, t); 
 } 
 t->parent->color='b'; 
 g->color='r'; 
 rightrotate(tree, g); 
 } 
 } 
 else 
 { 
 if(g->left!=NULL) 
 { 
 u=g->left; 
 if(u->color=='r') 
 { 
 t->parent->color='b'; 
 u->color='b'; 
 g->color='r'; 
 t=g; 
 } 
 } 
 else 
 { 
 if(t->parent->left==t) 
 { 
 t=t->parent; 
 rightrotate(tree, t); 
 } 
 t->parent->color='b'; 
 g->color='r'; 
 leftrotate(tree, g); 
 } 
 } 
 tree->root->color='b'; 
 } 
} 
void del(struct RBtree *tree){ 
 if(tree->root==NULL) 
 { 
 printf("\nEmpty Tree." ); 
 return ; 
 } 
 int x; 
 printf("\nEnter the key of the node to be deleted: "); 
 scanf("%d", &x); 
 struct node *p; 
 p=tree->root; 
 struct node *y=NULL; 
 struct node *q=NULL; 
 int found=0; 
 while(p!=NULL&&found==0) 
 { 
 if(p->key==x) 
 found=1; 
 if(found==0) 
 { 
 if(p->key<x) 
 p=p->right; 
 else 
 p=p->left; 
 } 
 } 
 if(found==0) 
 { 
 printf("\nElement Not Found."); 
 return ; 
 } 
 else 
 { 
 printf("\nDeleted Element: %d", p->key); 
 printf("\nColour: "); 
 if(p->color=='b') 
 printf("Black\n"); 
 else 
 printf("Red\n"); 
 if(p->parent!=NULL) 
 printf("\nParent: %d", p->parent->key); 
 else 
 printf("\nThere is no parent of the node. "); 
 if(p->right!=NULL) 
 printf("\nRight Child: %d", p->right->key); 
 else 
 printf("\nThere is no right child of the node. "); 
 if(p->left!=NULL) 
 printf("\nLeft Child: %d", p->left->key); 
 else 
 printf("\nThere is no left child of the node. "); 
 printf("\nNode Deleted."); 
 if(p->left==NULL||p->right==NULL) 
 y=p; 
 else 
 y=successor(p); 
 if(y->left!=NULL) 
 q=y->left; 
 else 
 { 
 if(y->right!=NULL) 
 q=y->right; 
 else 
 q=NULL; 
 } 
 if(q!=NULL) 
 q->parent=y->parent; 
 if(y->parent==NULL) 
 tree->root=q; 
 else 
 { 
 if(y==y->parent->left) 
 y->parent->left=q; 
 else 
 y->parent->right=q; 
 } 
 if(y!=p) 
 { 
 p->color=y->color; 
 p->key=y->key; 
 } 
 if(y->color=='b') 
 delfix(tree, q); 
 } 
} 
void delfix(struct RBtree *tree, struct node *p) 
{ 
 struct node *s; 
 while(p!=tree->root&&p->color=='b') 
 { 
 if(p->parent->left==p) 
 { 
 s=p->parent->right; 
 if(s->color=='r'){ 
 s->color='b'; 
 p->parent->color='r'; 
 leftrotate(tree, p->parent); 
 s=p->parent->right; 
 } 
 if(s->right->color=='b'&&s->left->color=='b') 
 { 
 s->color='r'; 
 p=p->parent; 
 } 
 else 
 { 
 if(s->right->color=='b') 
 { 
 s->left->color=='b'; 
 s->color='r'; 
 rightrotate(tree, s); 
 s=p->parent->right; 
 } 
 s->color=p->parent->color; 
 p->parent->color='b'; 
 s->right->color='b'; 
 leftrotate(tree, p->parent); 
 p=tree->root; 
 } 
 } 
 else 
 { 
 s=p->parent->left; 
 if(s->color=='r') 
 { 
 s->color='b'; 
 p->parent->color='r'; 
 rightrotate(tree, p->parent); 
 s=p->parent->left; 
 } 
 if(s->left->color=='b'&&s->right->color=='b') 
 { 
 s->color='r'; 
 p=p->parent; 
 } 
 else 
 { 
 if(s->left->color=='b') 
 { 
 s->right->color='b'; 
 s->color='r'; 
 leftrotate(tree, s); 
 s=p->parent->left; 
 } 
 s->color=p->parent->color; 
 p->parent->color='b'; 
 s->left->color='b'; 
 rightrotate(tree, p->parent); 
 p=tree->root; 
 } 
 } 
 p->color='b'; 
 tree->root->color='b'; 
 } 
} 
void leftrotate(struct RBtree *tree, struct node *p) 
{ 
 if(p->right==NULL) 
 return ; 
 else 
 { 
 struct node *y=p->right; 
 if(y->left!=NULL) 
 { 
 p->right=y->left; 
 y->left->parent=p; 
 } 
 else 
 p->right=NULL; 
 if(p->parent!=NULL) 
 y->parent=p->parent; 
 if(p->parent==NULL) 
 tree->root=y; 
 else 
 { 
 if(p==p->parent->left) 
 p->parent->left=y; 
 else 
 p->parent->right=y; 
 } 
 y->left=p; 
 p->parent=y; 
 } 
} 
void rightrotate(struct RBtree *tree, struct node *p) 
{ 
 if(p->left==NULL) 
 return ; 
 else 
 { 
 struct node *y=p->left; 
 if(y->right!=NULL) 
 { 
 p->left=y->right; 
 y->right->parent=p; 
 } 
 else 
 p->left=NULL; 
 if(p->parent!=NULL) 
 y->parent=p->parent; 
 if(p->parent==NULL) 
 tree->root=y; 
 else 
 { 
 if(p==p->parent->left) 
 p->parent->left=y; 
 else 
 p->parent->right=y; 
 } 
 y->right=p; 
 p->parent=y; 
 } 
} 
struct node* successor(struct node *p) 
{ 
 struct node *y=NULL; 
 if(p->left!=NULL) 
 { 
 y=p->left; 
 while(y->right!=NULL) 
 y=y->right; 
 } 
 else 
 { 
 y=p->right; 
 while(y->left!=NULL) 
 y=y->left; 
 } 
 return y; 
} 
void disp(struct RBtree *tree){ 
 display(tree->root); 
} 
void display(struct node *p) 
{ 
 if(p==NULL) 
 { 
 printf("\nEmpty Tree."); 
 return ; 
 } 
 if(p!=NULL) 
 { 
 printf("\n\t NODE: "); 
 printf("\n Key: %d", p->key); 
 printf("\n Colour: "); 
 if(p->color=='b') 
 printf("Black"); 
 else 
 printf("Red"); 
 if(p->parent!=NULL) 
 printf("\n Parent: %d", p->parent->key); 
 else 
 printf("\n There is no parent of the node. "); 
 if(p->right!=NULL) 
 printf("\n Right Child: %d", p->right->key); 
 else 
 printf("\n There is no right child of the node. "); 
 if(p->left!=NULL) 
 printf("\n Left Child: %d", p->left->key); 
 else 
 printf("\n There is no left child of the node. "); 
 printf("\n"); 
 if(p->left) 
 { 
 printf("\n\nLeft:\n"); 
 display(p->left); 
 } 
 if(p->right) 
 { 
 printf("\n\nRight:\n"); 
 display(p->right); 
 } 
 } 
} 
void search(struct RBtree *tree){ 
 if(tree->root==NULL){ 
 printf("\nEmpty Tree\n" ); 
return ; 
 } 
 int x; 
 printf("\n Enter key of the node to be searched: "); 
 scanf("%d", &x); 
 struct node *p=tree->root; 
 int found=0; 
 while(p!=NULL&& found==0) 
 { 
 if(p->key==x) 
 found=1; 
 if(found==0) 
 { 
 if(p->key<x) 
 p=p->right; 
 else 
 p=p->left; 
 } 
 } 
 if(found==0) 
 printf("\nElement Not Found."); 
 else 
 { 
 printf("\n\t FOUND NODE: "); 
 printf("\n Key: %d", p->key); 
 printf("\n Colour: "); 
 if(p->color=='b') 
 printf("Black"); 
 else 
 printf("Red"); 
 if(p->parent!=NULL) 
 printf("\n Parent: %d", p->parent->key); 
 else 
 printf("\n There is no parent of the node. "); 
 if(p->right!=NULL) 
 printf("\n Right Child: %d", p->right->key); 
 else 
 printf("\n There is no right child of the node. "); 
 if(p->left!=NULL) 
 printf("\n Left Child: %d", p->left->key); 
 else 
 printf("\n There is no left child of the node. "); 
 printf("\n"); 
 } 
} 
int main() 
{ 
 int ch,y=0; 
 struct RBtree obj; 
 obj.root=NULL; 
 obj.q=NULL; 
 printf("\n\t RED BLACK TREE " ); 
 printf("\n 1. Insert in the tree "); 
 printf("\n 2. Delete a node from the tree"); 
 printf("\n 3. Search for an element in the tree"); 
 printf("\n 4. Display the tree "); 
 printf("\n 5. Exit " ); 
 do 
 { 
 printf("\nEnter Your Choice: "); 
 scanf("%d", &ch); 
 switch(ch) 
 { 
 case 1 : insert(&obj); 
 printf("\nNode Inserted.\n"); 
 break; 
 case 2 : del(&obj); 
 break; 
 case 3 : search(&obj); 
 break; 
 case 4 : disp(&obj); 
 break; 
 case 5 : y=1; 
 break; 
 default : printf("\nEnter a Valid Choice."); 
 } 
 printf("\n"); 
 }while(y!=1); 
 return 1; 
}