
#include<stdio.h>
#include<stdlib.h>

struct node
{
int data;
struct node *link;
};
void display(struct node *head);
void traverse(struct node *head);
void delete_random(struct node *head);
int main()
{
struct node *head = (struct node*)malloc(sizeof(struct node*));
head->data = 10;
head->link = NULL;
struct node *current = (struct node*)malloc(sizeof(struct node*));
current->data = 20;
current->link = NULL;
head->link = current;
current = (struct node*)malloc(sizeof(struct node*));
current->data = 30;
current->link = NULL;
head->link->link = current;
current = (struct node*)malloc(sizeof(struct node*));
current->data = 40;
current->link = NULL;
head->link->link->link = current;
printf("before deleting :");
display(head);
traverse(head);
delete_random(head);
}
void traverse(struct node *head)
{
struct node *temp = head;
if(temp == NULL)
printf("Linked list is empty");
temp = NULL;
while(temp!=NULL)
{
printf("%d",temp->data);
temp=temp->link;
}
}
void display(struct node *head)
{
struct node*temp=head;
while(temp!=NULL)
{
	printf("%d->",temp->data);
	temp = temp->link;
}
}
void delete_random(struct node *head)
{
int position=3;
struct node *temp = head;
struct node *new = NULL;
if(head==NULL)
	free(head);
else 
{
while(position!=1)
{
new = temp;
temp = temp->link;
position--;
}
new->link=temp->link;
free(temp);
temp=NULL;
printf("\nAfter deletion :");
display(head);
}
}
#include<stdio.h>
#include<stdlib.h>

struct node
{
int data;
struct node *link;
};
void display(struct node *head);
void traverse(struct node *head);
void delete_random(struct node *head);
int main()
{
struct node *head = (struct node*)malloc(sizeof(struct node*));
head->data = 10;
head->link = NULL;
struct node *current = (struct node*)malloc(sizeof(struct node*));
current->data = 20;
current->link = NULL;
head->link = current;
current = (struct node*)malloc(sizeof(struct node*));
current->data = 30;
current->link = NULL;
head->link->link = current;
current = (struct node*)malloc(sizeof(struct node*));
current->data = 40;
current->link = NULL;
head->link->link->link = current;
printf("before deleting :");
display(head);
traverse(head);
delete_random(head);
}
void traverse(struct node *head)
{
struct node *temp = head;
if(temp == NULL)
printf("Linked list is empty");
temp = NULL;
while(temp!=NULL)
{
printf("%d",temp->data);
temp=temp->link;
}
}
void display(struct node *head)
{
struct node*temp=head;
while(temp!=NULL)
{
	printf("%d->",temp->data);
	temp = temp->link;
}
}
void delete_random(struct node *head)
{
int position=3;
struct node *temp = head;
struct node *new = NULL;
if(head==NULL)
	free(head);
else 
{
while(position!=1)
{
new = temp;
temp = temp->link;
position--;
}
new->link=temp->link;
free(temp);
temp=NULL;
printf("\nAfter deletion :");
display(head);
}
}
#include<stdio.h>
#include<stdlib.h>

struct node
{
int data;
struct node *link;
};
void display(struct node *head);
void traverse(struct node *head);
void delete_random(struct node *head);
int main()
{
struct node *head = (struct node*)malloc(sizeof(struct node*));
head->data = 10;
head->link = NULL;
struct node *current = (struct node*)malloc(sizeof(struct node*));
current->data = 20;
current->link = NULL;
head->link = current;
current = (struct node*)malloc(sizeof(struct node*));
current->data = 30;
current->link = NULL;
head->link->link = current;
current = (struct node*)malloc(sizeof(struct node*));
current->data = 40;
current->link = NULL;
head->link->link->link = current;
printf("before deleting :");
display(head);
traverse(head);
delete_random(head);
}
void traverse(struct node *head)
{
struct node *temp = head;
if(temp == NULL)
printf("Linked list is empty");
temp = NULL;
while(temp!=NULL)
{
printf("%d",temp->data);
temp=temp->link;
}
}
void display(struct node *head)
{
struct node*temp=head;
while(temp!=NULL)
{
	printf("%d->",temp->data);
	temp = temp->link;
}
}
void delete_random(struct node *head)
{
int position=3;
struct node *temp = head;
struct node *new = NULL;
if(head==NULL)
	free(head);
else 
{
while(position!=1)
{
new = temp;
temp = temp->link;
position--;
}
new->link=temp->link;
free(temp);
temp=NULL;
printf("\nAfter deletion :");
display(head);
}
}